#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

set -euo pipefail

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

AWS_CLI_URL="https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"
BUILD_DIR=$1
BUILDPACK_DIR="$(dirname $(dirname $0))"
PATH_DIR="/app"
INSTALL_DIR="$PATH_DIR/.awscli"
TMP_DIR=$(mktemp -d)

cd $BUILD_DIR

echo "-----> Downloading AWS CLI"
curl --silent --show-error --fail -o "${TMP_DIR}/awscliv2.zip" "${AWS_CLI_URL}" |& indent
unzip -qq -d "${TMP_DIR}" "${TMP_DIR}/awscliv2.zip" |& indent

mkdir -p "${BUILD_DIR}/.awscli"

# The AWS installer creates symlinks that use absolute paths, as such the install
# location must match the location from which the CLI is eventually run.
# At runtime the app will be run from /app, however at build time $BUILD_DIR is
# typically a path under /tmp (unless a Heroku CI build, in which case it's /app).
# In order to make all cases work, we have to create a symlink from /app to $BUILD_DIR,
# so that we can use `/app` paths for the installer, so that the symlinks it creates
# will use /app paths. A symlink is used instead of file copying to improve build times.
if [[ "${BUILD_DIR}" != /app ]]; then
  ln -nsf "${BUILD_DIR}" "${PATH_DIR}"
  ln -nsf "${BUILD_DIR}/.awscli" "${INSTALL_DIR}"
fi

mkdir -p $PATH_DIR/custom-bin
mkdir -p $PATH_DIR/.profile.d
mkdir -p "${INSTALL_DIR}"

echo "-----> Installing AWS CLI"

echo "${TMP_DIR}/aws/install" --install-dir "${INSTALL_DIR}" --bin-dir "${PATH_DIR}/custom-bin"

"${TMP_DIR}/aws/install" --install-dir "${INSTALL_DIR}" --bin-dir "${PATH_DIR}/custom-bin"

$PATH_DIR/custom-bin/aws --version

ls -la $PATH_DIR/custom-bin

ln -s $PATH_DIR/.awscli/v2/current/bin/aws $BUILD_DIR/custom-bin/aws

ls -la $PATH_DIR/custom-bin

echo "-----> Exporting PATH"

echo "export PATH=$PATH:$HOME/custom-bin" >> $BUILD_DIR/.profile.d/aws_binaries.sh

rm -rf "${TMP_DIR}"

echo "-----> Successfully installed AWS CLI"